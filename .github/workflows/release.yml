name: Release

on:
  push:
    tags:
    - v[0-9]+.[0-9]+.[0-9]+*
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test (e.g., v0.1.0 or v0.1.0-rc1)'
        required: true
        type: string
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always


jobs:
  release:
    name: Publish to GitHub Release
    permissions:
      contents: write
    outputs:
      rc: ${{ steps.check-tag.outputs.rc }}
      version: ${{ steps.check-tag.outputs.version }}

    strategy:
      matrix:
        include:
        - target: aarch64-unknown-linux-musl
          os: ubuntu-latest
          use-cross: true
          cargo-flags: ""
        - target: aarch64-apple-darwin
          os: macos-latest
          use-cross: true
          cargo-flags: ""
        - target: aarch64-pc-windows-msvc
          os: windows-latest
          use-cross: true
          cargo-flags: ""
        - target: x86_64-apple-darwin
          os: macos-latest
          cargo-flags: ""
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          cargo-flags: ""
        - target: x86_64-unknown-linux-musl
          os: ubuntu-latest
          use-cross: true
          cargo-flags: ""
        - target: i686-unknown-linux-musl
          os: ubuntu-latest
          use-cross: true
          cargo-flags: ""
        - target: i686-pc-windows-msvc
          os: windows-latest
          use-cross: true
          cargo-flags: ""
        - target: armv7-unknown-linux-musleabihf
          os: ubuntu-latest
          use-cross: true
          cargo-flags: ""
        - target: arm-unknown-linux-musleabihf
          os: ubuntu-latest
          use-cross: true
          cargo-flags: ""

    runs-on: ${{matrix.os}}
    env:
      BUILD_CMD: cargo

    steps:
    - uses: actions/checkout@v4

    - name: Determine Version and RC status
      id: check-tag
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ver="${{ github.event.inputs.version }}"
        else
          ver="${GITHUB_REF##*/}"
        fi

        echo "Determined version: $ver"
        echo "version=$ver" >> $GITHUB_OUTPUT

        if [[ "$ver" =~ - ]]; then
          echo "rc=true" >> $GITHUB_OUTPUT
          echo "Detected pre-release: $ver"
        else
          echo "rc=false" >> $GITHUB_OUTPUT
          echo "Detected final release: $ver"
        fi


    - name: Install Rust Toolchain Components
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      if: matrix.use-cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Overwrite build command env variable
      if: matrix.use-cross
      shell: bash
      run: echo "BUILD_CMD=cross" >> $GITHUB_ENV
  
    - name: Show Version Information (Rust, cargo, GCC)
      shell: bash
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V
      
    - name: Install OpenSSL dependencies (Linux)
      if: runner.os == 'Linux' && matrix.use-cross
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config
      
    - name: Build
      shell: bash
      run: $BUILD_CMD build --locked --release --target=${{ matrix.target }} ${{ matrix.cargo-flags }}

    - name: Build Archive
      shell: bash
      id: package
      env:
        target: ${{ matrix.target }}
        version: ${{ steps.check-tag.outputs.version }}
      run: |
        set -euxo pipefail

        bin=${GITHUB_REPOSITORY##*/}
        dist_dir=`pwd`/dist
        name=$bin-$version-$target
        executable=target/$target/release/$bin

        if [[ "$RUNNER_OS" == "Windows" ]]; then
          executable=$executable.exe
        fi

        mkdir -p $dist_dir
        cp $executable $dist_dir/
        cd $dist_dir

        if [[ "$RUNNER_OS" == "Windows" ]]; then
            archive=$name.zip
            7z a $archive *
            echo "archive=$archive" >> $GITHUB_OUTPUT
        else
            archive=$name.tar.gz
            tar -czf $archive *
            echo "archive=$archive" >> $GITHUB_OUTPUT
        fi
        echo "Created archive: $archive in $(pwd)"
        cd ..
        echo "archive_path=dist/$archive" >> $GITHUB_OUTPUT

    - name: Publish Archive
      uses: softprops/action-gh-release@v2
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      with:
        tag_name: ${{ steps.check-tag.outputs.version }}
        draft: ${{ github.event_name == 'workflow_dispatch' }}
        files: ${{ steps.package.outputs.archive_path }}
        prerelease: ${{ steps.check-tag.outputs.rc == 'true' }}


  publish-crate:
    name: Publish to crates.io
    needs: release
    if: github.event_name == 'push' && needs.release.outputs.rc == 'false'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.release.outputs.version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Clippy
      run: cargo clippy -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Publish to crates.io
      run: cargo publish --token ${CRATES_IO_TOKEN}
      env:
        CRATES_IO_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }} 
